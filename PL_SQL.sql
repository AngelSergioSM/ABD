

-- EJERCICIO 2 V_SALDOS_INDIVIDUAL FUNCIONA :D

CREATE OR REPLACE VIEW V_SALDOS_INDIVIDUAL AS
    SELECT CLIENTE.IDENTIFICACION, CUENTA_FINTECH.IBAN,DEPOSITADA_EN.SALDO,DIVISA.ABREVIATURA,DIVISA.CAMBIOEURO
    FROM CLIENTE JOIN CUENTA_FINTECH ON CLIENTE.ID=CUENTA_FINTECH.CLIENTE_ID 
    JOIN DEPOSITADA_EN ON DEPOSITADA_EN.POOLED_ACCOUNT_IBAN=CUENTA_FINTECH.IBAN 
    JOIN CUENTA_REFERENCIA ON CUENTA_REFERENCIA.IBAN=DEPOSITADA_EN.CUENTA_REFERENCIA_IBAN
    JOIN DIVISA ON CUENTA_REFERENCIA.DIVISA_ABREVIATURA=DIVISA.ABREVIATURA
    
    UNION ALL
    
    SELECT CLIENTE.IDENTIFICACION, CUENTA_FINTECH.IBAN,CUENTA_REFERENCIA.SALDO,DIVISA.ABREVIATURA,DIVISA.CAMBIOEURO
    FROM CLIENTE JOIN CUENTA_FINTECH ON CLIENTE.ID=CUENTA_FINTECH.CLIENTE_ID 
    JOIN CUENTA_REFERENCIA ON CUENTA_REFERENCIA.IBAN=CUENTA_FINTECH.IBAN
    JOIN DIVISA ON CUENTA_REFERENCIA.DIVISA_ABREVIATURA=DIVISA.ABREVIATURA;
    
CREATE OR REPLACE VIEW V_SALDOS_AUTORIZADA AS
    SELECT PERSONA_AUTORIZADA.IDENTIFICACION, CUENTA_FINTECH.IBAN,DEPOSITADA_EN.SALDO,DIVISA.ABREVIATURA,DIVISA.CAMBIOEURO
    FROM PERSONA_AUTORIZADA JOIN AUTORIZACION ON AUTORIZACION.PERSONA_ID=PERSONA_AUTORIZADA.ID
    JOIN EMPRESA ON AUTORIZACION.EMPRESA_ID=EMPRESA.ID
    JOIN CLIENTE ON CLIENTE.ID=EMPRESA.ID
    JOIN CUENTA_FINTECH ON CLIENTE.ID=CUENTA_FINTECH.CLIENTE_ID 
    JOIN DEPOSITADA_EN ON DEPOSITADA_EN.POOLED_ACCOUNT_IBAN=CUENTA_FINTECH.IBAN 
    JOIN CUENTA_REFERENCIA ON CUENTA_REFERENCIA.IBAN=DEPOSITADA_EN.CUENTA_REFERENCIA_IBAN
    JOIN DIVISA ON CUENTA_REFERENCIA.DIVISA_ABREVIATURA=DIVISA.ABREVIATURA
    
    UNION ALL
    
    SELECT PERSONA_AUTORIZADA.IDENTIFICACION, CUENTA_FINTECH.IBAN,CUENTA_REFERENCIA.SALDO,DIVISA.ABREVIATURA,DIVISA.CAMBIOEURO
     FROM PERSONA_AUTORIZADA JOIN AUTORIZACION ON AUTORIZACION.PERSONA_ID=PERSONA_AUTORIZADA.ID
    JOIN EMPRESA ON AUTORIZACION.EMPRESA_ID=EMPRESA.ID
    JOIN CLIENTE ON CLIENTE.ID=EMPRESA.ID
    JOIN CUENTA_FINTECH ON CLIENTE.ID=CUENTA_FINTECH.CLIENTE_ID 
    JOIN CUENTA_REFERENCIA ON CUENTA_REFERENCIA.IBAN=CUENTA_FINTECH.IBAN
    JOIN DIVISA ON CUENTA_REFERENCIA.DIVISA_ABREVIATURA=DIVISA.ABREVIATURA;

--EJERCICIO 2 TR_TRANSACCION

CREATE SEQUENCE SQ_TRANSACCION
    START WITH 1; --SI YA HAY DATOS EN TRANSACCION CAMBIAR A UN NUMERO QUE NO TENGA YA ID_UNICA

CREATE OR REPLACE TRIGGER TR_TRANSACCION
    BEFORE INSERT ON TRANSACCION
        FOR EACH ROW
Begin
    :new.ID_UNICO := SQ_TRANSACCION.NEXTVAL;
END TR_TRANSACCION;

--EJERCICIO 3 A) V_TARJETA_MENSUAL

CREATE OR REPLACE VIEW V_TARJETA_MENSUAL (IDENTIFICACION, NUMERO_TARJETA, GASTO, ABREVIATURA) 
    AS (SELECT CLIENTE.identificacion, TARJETA_CREDITO.num_tarjeta, SUM(MOVIMIENTO.cantidad), DIVISA.abreviatura 
    FROM CLIENTE, DIVISA, TARJETA_CREDITO, MOVIMIENTO, CUENTA_FINTECH
    
    WHERE
        CUENTA_FINTECH.CLIENTE_ID=CLIENTE.ID AND
        CUENTA_FINTECH.IBAN = TARJETA_CREDITO.CUENTA_IBAN AND
        TARJETA_CREDITO.num_tarjeta = MOVIMIENTO.num_tarjeta AND
        MOVIMIENTO.divisa = DIVISA.abreviatura
    GROUP BY DIVISA.abreviatura,CLIENTE.identificacion, TARJETA_CREDITO.num_tarjeta);


--EJERCICIO 3 B) V_PAGOS_PENDIENTES
    CREATE OR REPLACE VIEW v_pagos_pendientes (identificacion, numero_tarjeta, pendientes, abreviatura)
    AS (SELECT C.identificacion, T.num_tarjeta, M.estado, D.abreviatura
    FROM CLIENTE C, divisa D, tarjeta_credito T, movimiento M, CUENTA_FINTECH CF
    WHERE
        CF.CLIENTE_ID=C.ID AND
        CF.IBAN = T.CUENTA_IBAN AND
        T.NUM_TARJETA = M.num_tarjeta AND
        M.divisa = D.abreviatura AND
        M.estado = 'PENDIENTE');

--EJERCICIO 3 C) P_COBROS

CREATE OR REPLACE PROCEDURE P_COBRO IS MODO TARJETA_CREDITO.MODO_DEFAULT%TYPE;
                                       SALDO_ACTUAL DEPOSITADA_EN.SALDO%TYPE;
                                       IBAN_TARJETA CUENTA.IBAN%TYPE;
                                       CANTIDAD_MOV MOVIMIENTO.CANTIDAD%TYPE;
                                                                         
    CURSOR C_TARJETA IS SELECT NUM_TARJETA FROM TARJETA_CREDITO; 
    
BEGIN

    BEGIN
     
    FOR TARJETA IN C_TARJETA LOOP
     
    --Seleccionamos las filas estado y modo de la tarjeta
         SELECT MODO_DEFAULT INTO MODO FROM TARJETA_CREDITO WHERE TARJETA.NUM_TARJETA=TARJETA_CREDITO.NUM_TARJETA;
         SELECT CUENTA.IBAN INTO IBAN_TARJETA FROM CUENTA JOIN TARJETA_CREDITO ON CUENTA.IBAN=TARJETA_CREDITO.CUENTA_IBAN WHERE TARJETA.NUM_TARJETA=NUM_TARJETA;
         SELECT SUM(SALDO) INTO SALDO_ACTUAL FROM DEPOSITADA_EN WHERE IBAN_TARJETA=POOLED_ACCOUNT_IBAN;
         SELECT SUM(CANTIDAD) INTO CANTIDAD_MOV FROM MOVIMIENTO WHERE TARJETA.NUM_TARJETA=NUM_TARJETA;

    UPDATE MOVIMIENTO SET ESTADO=UPPER('cobrado') WHERE  TARJETA.NUM_TARJETA=NUM_TARJETA AND UPPER(ESTADO)=UPPER('pendiente') AND UPPER(MODO)=UPPER('debito');
    UPDATE DEPOSITADA_EN SET SALDO=SALDO_ACTUAL-CANTIDAD_MOV WHERE IBAN_TARJETA=POOLED_ACCOUNT_IBAN;
    
    END LOOP;
    END;
    

    
END P_COBRO;

-- EJERCICIO 3 D) J_LIQUIDAR


BEGIN
    DBMS_SCHEDULER.CREATE_JOB (
    job_name => 'J_LIQUIDAR',
    job_type => 'PLSQL_BLOCK',
    job_action => 'BEGIN EXEC P_COBRO; END;',
    start_date => LAST_DAY(SYSDATE)+1,
    repeat_interval => 'FREQ=MONTHLY;BYMONTHDAY=1;BYHOUR=0',
    end_date => NULL,
    enabled => TRUE,
    comments => 'Ejecuta procedimiento P_COBRO cada primer dia del mes');
END;


BEGIN
DBMS_SCHEDULER.CREATE_JOB(
    job_name            => 'J_CAMBIO_EURO',
    job_type            => 'PLSQL_BLOCK',
    job_action          => 'CAMBIO_EURO;',
    start_date          =>  SYSDATE,
    repeat_interval     =>  'FREQ=DAILY;BYHOUR=0;BYMINUTE=5' ,
    end_date            => null,
    enabled             => TRUE,
    comments            => 'Actualiza el atributo CambioEuro con el valor de V_COTIZACIONES a las 00:05 de cada día.'
);
END;





-- =========================OPCIONAL===================
-- 4. AUDITORÍAS
AUDIT ALL ON FINTECH.TRANSACCION;
AUDIT ALL ON FINTECH.MOVIMIENTO;

AUDIT UPDATE, INSERT, DELETE ON FINTECH.DEPOSITADA_EN;
AUDIT UPDATE, INSERT, DELETE ON FINTECH.CUENTA_REFERENCIA;

---- DESDE SYSTEM --
--Muestra la auditoría estándar:
SELECT * FROM SYS.DBA_AUDIT_TRAIL;

--Información relativa a la auditoría de los inicios de sesión de los usuarios
SELECT * FROM SYS.DBA_AUDIT_SESSION;

-- Ver que la auditoría AUDIT_TRAIL está activa:
SELECT name, value
FROM v$parameter
WHERE NAME LIKE 'audit_trail';
-- ====FIN AUDITORÍAS====

